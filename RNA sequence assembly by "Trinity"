## 

Trinity转录组组装完整流程概览
整个流程可以分为以下几个核心步骤：

1.质量评估（可选但推荐）：对Trimmed后的数据进行质控，确认修剪效果。
2.组装核心：运行Trinity：使用Trinity主程序进行从头组装。
3.组装质量评估：使用Trinity自带的脚本和其他工具评估组装结果的好坏。
4.结果整理与注释（下游分析准备）：生成基因转录本关联文件并为后续分析（如定量、差异表达）做准备。

##




##
Step1. 质量评估（Trimmed数据）
在组装前，最后确认一下修剪后的数据质量是良好的。

软件： FastQC, MultiQC
输入： *.fastq.gz (Trimmed paired-end reads)
输出： HTML格式的质量报告

脚本示例：
##

# 进入存放trimmed数据的目录
cd /path/to/your/trimmed_data

# 创建输出目录
mkdir -p ../qc_trimmed

# 对每个trimmed的fastq文件运行FastQC
fastqc *.fastq.gz -o ../qc_trimmed/ -t 8 # -t 指定线程数

# 使用MultiQC整合所有FastQC结果
multiqc ../qc_trimmed/ -o ../qc_trimmed/multiqc_report




##
Step.2 核心组装 - 运行Trinity
这是最核心的一步，会消耗大量的计算资源（CPU和内存）。参数可以根据你的数据情况进行调整。

软件： Trinity
输入： Trimmed过的Paired-end reads（通常是 _1P.fastq / _2P.fastq 或 _1_val_1.fq / _2_val_2.fq）
输出： 转录本序列文件 trinity_out_dir.Trinity.fasta

关键参数：

--seqType fq：输入文件格式为fastq。

--left， --right：左右端读段文件。

--max_memory：指定最大使用内存，如 50G。务必根据服务器情况设置。

--CPU：指定使用的CPU线程数。

--output：输出目录名称。

脚本示例：
##

# 进入存放trimmed数据的目录
cd /path/to/your/trimmed_data

# 运行Trinity组装
Trinity --seqType fq \
        --max_memory 50G \
        --CPU 20 \
        --left sample1_1P.fastq.gz,sample2_1P.fastq.gz  \  # 可以是多个样本，用逗号分隔
        --right sample1_2P.fastq.gz,sample2_2P.fastq.gz \
        --output ../trinity_out_dir \
        --trimmomatic # 如果你用的不是已经trim过的数据，可以加这个参数让Trinity自己先trim




##
Step.3 组装质量评估
组装完成后，我们需要知道组装出来的结果好不好。

3.1 使用Trinity自带的脚本进行评估
软件： Trinity 配套脚本
输入： trinity_out_dir.Trinity.fasta
输出： 各种统计指标

脚本示例：
##

# 进入Trinity输出目录
cd /path/to/trinity_out_dir/

# 1. 统计基本指标：转录本数量、N50、ExN50等
$TRINITY_HOME/util/TrinityStats.pl Trinity.fasta > Trinity_stats.txt

# 2. 评估组装完整度（BUSCO评估）
# 需要先安装BUSCO并下载合适的数据库（如 eukaryota_odb10）
python3 run_BUSCO.py -i Trinity.fasta \
                     -o trinity_busco \
                     -l /path/to/database/eukaryota_odb10/ \
                     -m transcriptome \
                     -c 20

# 3. 评估与参考基因组的比对率（如果有参考基因组）
# 需要先准备好参考基因组文件 genome.fa 和注释文件 annotation.gtf
$TRINITY_HOME/util/align_and_estimate_abundance.pl \
    --transcripts Trinity.fasta \
    --seqType fq \
    --samples_file samples.txt \ # 一个文本文件，指定样本和比对路径
    --est_method salmon \        # 使用salmon进行比对和定量
    --trinity_mode \
    --prep_reference \
    --output_dir salmon_quant

# 然后计算比对率
$TRINITY_HOME/util/misc/contig_ExN50_statistic.pl \
    salmon_quant/isoseq_degs/transcript_exn50/Trinity.transcript_exn50 \
    | tee ExN50_stats.txt

##
3.2 使用其他工具评估（如CD-HIT-EST去重）
有时Trinity结果中会有一些冗余序列，可以用CD-HIT-EST进一步去重。
##

脚本示例： 
cd-hit-est -i Trinity.fasta \
           -o Trinity_cdhit.fasta \
           -T 20 \ # 线程
           -M 0 \  # 内存限制，0为无限制
           -c 0.95 # 相似度阈值




##
Step.4 结果整理与下游分析准备
组装结果需要整理以便用于下游分析，如基因表达定量、差异基因分析等。

4.1 生成基因与转录本的映射关系文件
这个文件对于将转录本水平的定量结果汇总到基因水平至关重要。

软件： Trinity 配套脚本
输入： Trinity.fasta
输出： Trinity.fasta.gene_trans_map

脚本示例：
##

# 进入Trinity输出目录
cd /path/to/trinity_out_dir/

# 提取基因和转录本的对应关系
$TRINITY_HOME/util/support_scripts/get_Trinity_gene_to_trans_map.pl Trinity.fasta > Trinity.fasta.gene_trans_map

4.2 为下游定量软件准备索引
例如，为Salmon或Kallisto准备索引文件。

脚本示例（Salmon）：
# 进入Trinity输出目录
cd /path/to/trinity_out_dir/

# 为Salmon创建索引
salmon index -t Trinity.fasta \
             -i salmon_index \
             --gencode \ # 因为Trinity转录本id类似GENCODE格式
             -p 20

